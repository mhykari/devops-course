---
- name: Read local linux user database
  ansible.builtin.getent:
    database: passwd
    # creates a dict for each user containing UID/HOMEDIR etc...
  # skip this task if getent was run before without specifying a key (single entry)
  when: getent_passwd is undefined or
    getent_passwd | length <= 1

- name: Read local linux shadow database
  ansible.builtin.getent:
    database: shadow

- name: Extract regular (non-system, non-root) accounts from local user database
  loop: "{{ getent_passwd.keys() | list }}"
  when:
    - getent_passwd[item][1]|int >= os_auth_uid_min|int
    - getent_passwd[item][1]|int <= os_auth_uid_max|int
    - item is not in os_always_ignore_users # skip users from "os_always_ignore_users" list (taken from role "vars")
    - item is not in os_ignore_users # skip users from "os_ignore_users"        list (taken from role "defaults")
  ansible.builtin.set_fact:
    regular_users: "{{ regular_users | default([]) + [item] }}"

- name: Set password ageing for existing regular (non-system, non-root) accounts
  ansible.builtin.user:
    name: "{{ item }}"
    password_expire_min: "{{ os_auth_pw_min_age }}"
    password_expire_max: "{{ os_auth_pw_max_age }}"
  loop: "{{ regular_users }}"
  when:
    - os_user_pw_ageing
    - regular_users is defined and (regular_users | length > 0)
    - item not in os_users_without_password_ageing
    - getent_shadow[item][0] is not match("\*") # password hashes containing illegal characters like "*" are unusable (locked) and don't need to age
    - getent_shadow[item][0] is not match("\!") # password hashes containing illegal characters like "!" are unusable (locked) and don't need to age
