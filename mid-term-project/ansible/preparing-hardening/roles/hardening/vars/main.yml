---
# vars file for hardening
packages:
  - sysstat
  - wget
  - git
  - vim
  - nano
  - bash-completion
  - curl
  - htop
  - iftop
  - jq
  - ncdu
  - unzip
  - net-tools
  - dnsutils
  - atop
  - sudo
  - fail2ban
  - software-properties-common
  - apache2-utils
  - tcpdump
  - telnet
  - axel
  - iptables-persistent
  - ntp
  - auditd
  - libpwquality-common
  - cracklib-runtime
  - apt-utils
  - lynis
  - python3-firewall
  - apt-listchanges
  - apt-show-versions
  - debsums

os_security_packages_clean: true

os_security_packages_list:
  - xinetd
  - inetd
  - ypserv
  - telnet-server
  - rsh-server
  - prelink

unnecessary_services:
  - postfix
  - telnet
  - ufw

unnecessary_software:
  - tcpdump
  - nmap-ncat
  - wpa_supplicant

# sshd configuration
sshd_config:
  Port: "{{ ansible_port }}"
  ListenAddress: 0.0.0.0
  PermitRootLogin: without-password
  PasswordAuthentication: "yes"
  AllowUsers: root osboxes
  AllowGroups: root osboxes

# iptables configuration
iptables:
  network_adapter_access:
    - lo
  tcp_port_access:
    - 80
    - 443
  #udp_port_access:
  trusted_IP:
    - 87.247.187.145
  trusted_Range:
    - 172.16.170.0/24

# fail2ban configuration
fail2ban:
  bantime: 10m
  findtime: 10m
  maxretry: 5

# setion timeout setting (seconds)
timeout_time: 1800

# auditd vars
auditd_apply_audit_rules: "yes"
auditd_action_mail_acct: root
auditd_admin_space_left_action: suspend
auditd_disk_error_action: suspend
auditd_disk_full_action: suspend
auditd_max_log_file: 8
auditd_max_log_file_action: keep_logs
auditd_mode: 1
auditd_num_logs: 5
auditd_space_left: 75
auditd_space_left_action: email
grub_audit_backlog_cmdline: audit_backlog_limit=8192
grub_audit_cmdline: audit=1

# lynis variables
lynis_version: "3.0.8"
lynis_name: "lynis-{{ lynis_version }}"
lynis_tarball_url: "https://cisofy.com/files/{{ lynis_name }}.tar.gz"
lynis_tarball_unpackdest: "/opt"
lynis_tarball_unpackdest_dir: "{{ lynis_tarball_unpackdest }}/lynis"
lynis_tarball_dest: "{{ lynis_tarball_unpackdest_dir }}/{{ lynis_name }}.tar.gz"

# dns variables
dns_A: 178.22.122.100
dns_B: 185.51.200.2
fallback_dns: 9.9.9.9 4.2.2.4
dnssec: allow-downgrade
dns_over_tls: opportunistic

# Limit.conf variables
limit_nofile_hard: 1024
limit_nofile_soft: 512
limit_nproc_hard: 1024
limit_nproc_soft: 512

# system accounts that do not get their login disabled and password changed
os_always_ignore_users: [root, sync, shutdown, halt]
#Specify system accounts whose login should not be disabled and password not changed
os_ignore_users: [vagrant, kitchen]
os_security_kernel_enable_module_loading: true
#Set to false to disable password age enforcement on existing users
os_user_pw_ageing: true
#List of users, where password ageing should not be enforced even if "os_user_pw_ageing" is enabled
os_users_without_password_ageing: ["osboxes"]
#maximum password age (set to `99999` to effectively disable it).
os_auth_pw_max_age: 60
#minimum password age (before allowing any other password change).
os_auth_pw_min_age: 7
#password hash character
password_hash: fcfCIP6XWOn+jy4FJV3lNluGaGUqRdDDfFAa3lq5N5g=
#minimum number for automatic uid selection in useradd.
os_auth_uid_min: 1000
#maximum number for automatic uid selection in useradd.
os_auth_uid_max: 60000
#number of days of warning before password expires.
os_auth_pw_warn_age: 7
os_auth_sys_uid_min: 100
os_auth_sys_uid_max: 999
#minimum number for automatic gid selection in groupadd.
os_auth_gid_min: 1000
#maximum number for automatic gid selection in groupadd.
os_auth_gid_max: 60000
os_auth_sys_gid_min: 100
os_auth_sys_gid_max: 999
os_auth_sub_uid_min: 100000
os_auth_sub_uid_max: 600100000
os_auth_sub_uid_count: 65536
os_auth_sub_gid_min: 100000
os_auth_sub_gid_max: 600100000
os_auth_sub_gid_count: 65536
#true if to allow users without home to login.
os_auth_allow_homeless: false
#the maximum number of authentication attempts, before the account is locked for some time.
os_auth_retries: 5
#authentication timeout in seconds, so login will exit if this time passes.
os_auth_timeout: 60
#Define the number of maximum SHA rounds. With a lot of rounds brute forcing the password is more difficult. But note also that it more
#CPU resources will be needed to authenticate users. The values must be inside
#the 1000-999999999 range.
os_sha_crypt_max_rounds: 640000
os_sha_crypt_min_rounds: 640000

# defaults for useradd
os_useradd_mail_dir: /var/mail

# defaults file for hardening
os_env_extra_user_paths: []

os_env_umask: "027"

sysctl_config:
  # These settings eliminate an entire class of security vulnerabilities:
  # time-of-check-time-of-use cross-privilege attacks using guessable
  # filenames (generally seen as "/tmp file race" vulnerabilities).
  fs.protected_hardlinks: 1
  fs.protected_symlinks: 1

  # For more info on the following settings see: https://www.kernel.org/doc/html/latest/admin-guide/sysctl/fs.html
  # Restrict FIFO special device creation behavior
  fs.protected_fifos: 1
  # Restrict regular files creation behavior
  fs.protected_regular: 2

  # Prevent core dumps with SUID. These are usually only
  # needed by developers and may contain sensitive information. | sysctl-31
  fs.suid_dumpable: 0

  # Controls whether core dumps will append the PID to the core filename
  # Useful for debugging multi-threaded applications
  kernel.core_uses_pid: 1

  # When an attacker is trying to exploit the local kernel, it is often
  # helpful to be able to examine where in memory the kernel, modules,
  # and data structures live. As such, kernel addresses should be treated
  # as sensitive information.
  #
  # Many files and interfaces contain these addresses (e.g. /proc/kallsyms,
  # /proc/modules, etc), and this setting can censor the addresses. A value
  # of "0" allows all users to see the kernel addresses. A value of "1"
  # limits visibility to the root user, and "2" blocks even the root user.
  #
  # Some off-the-shelf malware exploit kernel addresses exposed
  # via /proc/kallsyms so by not making these addresses easily available
  # we increase the cost of such attack some what; now such malware has
  # to check which kernel Tails is running and then fetch the corresponding
  # kernel address map from some external source. This is not hard,
  # but certainly not all malware has such functionality. | Tails-2
  kernel.kptr_restrict: 2

  # kexec is dangerous: it enables replacement of the running kernel. | Tails-3
  kernel.kexec_load_disabled: 1

  # This setting controls how the kernel behaves towards module changes at
  # runtime. Setting to 1 will disable module loading at runtime.
  # Setting it to 0 is actually never supported. | sysctl-29
  # kernel.modules_disabled: 1

  # Magic Sysrq should be disabled, but can also be set to a safe value if so
  # desired for physical machines. It can allow a safe reboot if the system hangs
  # and is a 'cleaner' alternative to hitting the reset button. | sysctl-30
  # The following values are permitted:
  # * **0**   - disable sysrq
  # * **1**   - enable sysrq completely
  # * **>1**  - bitmask of enabled sysrq functions:
  # * **2**   - control of console logging level
  # * **4**   - control of keyboard (SAK, unraw)
  # * **8**   - debugging dumps of processes etc.
  # * **16**  - sync command
  # * **32**  - remount read-only
  # * **64**  - signalling of processes (term, kill, oom-kill)
  # * **128** - reboot/poweroff
  # * **256** - nicing of all RT tasks
  kernel.sysrq: 0

  # Virtual memory regions protection | sysctl-32
  kernel.randomize_va_space: 2

  # The PTRACE system is used for debugging.  With it, a single user process
  # can attach to any other dumpable process owned by the same user.  In the
  # case of malicious software, it is possible to use PTRACE to access
  # credentials that exist in memory (re-using existing SSH connections,
  # extracting GPG agent information, etc).
  #
  # A PTRACE scope of "0" is the more permissive mode.  A scope of "1" limits
  # PTRACE only to direct child processes (e.g. "gdb name-of-program" and
  # "strace -f name-of-program" work, but gdb's "attach" and "strace -fp $PID"
  # do not).  The PTRACE scope is ignored when a user has CAP_SYS_PTRACE, so
  # "sudo strace -fp $PID" will work as before.  For more details see:
  # https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace
  #
  # For applications launching crash handlers that need PTRACE, exceptions can
  # be registered by the debuggee by declaring in the segfault handler
  # specifically which process will be using PTRACE on the debuggee:
  #   prctl(PR_SET_PTRACER, debugger_pid, 0, 0, 0);
  #
  # In general, PTRACE is not needed for the average running Ubuntu system.
  # To that end, the default is to set the PTRACE scope to "1".  This value
  # may not be appropriate for developers or servers with only admin accounts.
  # kernel.yama.ptrace_scope = 1
  kernel.yama.ptrace_scope: 1

  # Disable traffic forwarding.
  # Setting the flag to 0 ensures that a system with multiple interfaces (for example, a hard
  # proxy), will never be able to forward packets, and therefore, never serve as a router.
  # | sysctl-01 | sysctl-19
  net.ipv4.ip_forward: 0
  net.ipv6.conf.all.forwarding: 0

  # Enable RFC-recommended source validation feature.
  # If the return packet does not go out the same interface that the corresponding
  # source packet came from, the packet is dropped (and logged if log_martians is set).
  # | sysctl-02
  net.ipv4.conf.all.rp_filter: 1
  net.ipv4.conf.default.rp_filter: 1

  # Reduce the surface on SMURF attacks. | sysctl-04
  # Make sure to ignore ECHO broadcasts, which are only required in broad network analysis.
  net.ipv4.icmp_echo_ignore_broadcasts: 1

  # Some routers (and some attackers) will send responses that violate RFC-1122 and attempt
  # to fill up a log file system with many useless error messages.
  # | sysctl-03
  net.ipv4.icmp_ignore_bogus_error_responses: 1

  # Limit the amount of traffic the system uses for ICMP. | sysctl-05
  net.ipv4.icmp_ratelimit: 100

  # Adjust the ICMP ratelimit to include ping, dst unreachable,
  # source quench, ime exceed, param problem, timestamp reply, information reply | sysctl-06
  net.ipv4.icmp_ratemask: 88089

  # Disable TCP timestamps in order to not reveal system uptime. | sysctl-07
  net.ipv4.tcp_timestamps: 0

  # Define restriction level for announcing the local source IP | sysctl-08
  net.ipv4.conf.all.arp_ignore: 1

  # Define mode for sending replies in response to
  # received ARP requests that resolve local target IP addresses | sysctl-09
  net.ipv4.conf.all.arp_announce: 2

  # RFC 1337 fix F1 | sysctl-10
  net.ipv4.tcp_rfc1337: 1

  # Attackers use SYN flood attacks to perform a denial of service attack on a system
  # by sending many SYN packets without completing the three way handshake.
  # This will quickly use up slots in the kernel's half-open connection queue and
  # prevent legitimate connections from succeeding.
  # SYN cookies allow the system to keep accepting valid connections, even if
  # under a denial of service attack. CIS Distro Independent 3.2.8.
  net.ipv4.tcp_syncookies: 1

  # Send(router) or accept(host) RFC1620 shared media redirects | sysctl-12
  net.ipv4.conf.all.shared_media: 1
  net.ipv4.conf.default.shared_media: 1

  # Accepting source route can lead to malicious networking behavior,
  # so disable it if not needed. | sysctl-13
  net.ipv4.conf.all.accept_source_route: 0
  net.ipv4.conf.default.accept_source_route: 0
  net.ipv6.conf.all.accept_source_route: 0
  net.ipv6.conf.default.accept_source_route: 0

  # For non-routers: don't send redirects.
  # An attacker could use a compromised host to send invalid ICMP redirects to other
  # router devices in an attempt to corrupt routing and have users access a system
  # set up by the attacker as opposed to a valid system.
  # | sysctl-16
  net.ipv4.conf.all.send_redirects: 0
  net.ipv4.conf.default.send_redirects: 0

  # Log martian packets
  # This feature logs packets with un-routable source addresses to the kernel log.
  # Enabling this feature and logging these packets allows an administrator to investigate
  # the possibility that an attacker is sending spoofed packets to their system.
  # | sysctl-17
  net.ipv4.conf.all.log_martians: 1
  net.ipv4.conf.default.log_martians: 1

  # Accepting redirects can lead to malicious networking behavior, so disable
  # it if not needed.
  # Attackers could use bogus ICMP redirect messages to maliciously alter the system
  # routing tables and get them to send packets to incorrect networks and allow
  # your system packets to be captured.
  # Setting net.ipv4.conf.all.secure_redirects to 0 protects the system from
  # routing table updates by possibly compromised known gateways.
  # | sysctl-13 | sysctl-14 | sysctl-15 | sysctl-20
  net.ipv4.conf.default.accept_redirects: 0
  net.ipv4.conf.all.accept_redirects: 0
  net.ipv4.conf.all.secure_redirects: 0
  net.ipv4.conf.default.secure_redirects: 0
  net.ipv6.conf.default.accept_redirects: 0
  net.ipv6.conf.all.accept_redirects: 0

  # Ignore RAs on Ipv6. | sysctl-25
  net.ipv6.conf.all.accept_ra: 0
  net.ipv6.conf.default.accept_ra: 0

  # Disable acceptance of IPv6 router solicitations messages | sysctl-21
  net.ipv6.conf.default.router_solicitations: 0
  net.ipv6.conf.all.router_solicitations: 0

  # Disable Accept Router Preference from router advertisement | sysctl-22
  net.ipv6.conf.default.accept_ra_rtr_pref: 0

  # Disable learning Prefix Information from router advertisement | sysctl-23
  net.ipv6.conf.default.accept_ra_pinfo: 0

  # Disable learning Hop limit from router advertisement | sysctl-24
  net.ipv6.conf.default.accept_ra_defrtr: 0

  # Disable IPv6 autoconfiguration | sysctl-26
  net.ipv6.conf.default.autoconf: 0
  net.ipv6.conf.all.autoconf: 0

  # Disable neighbor solicitations to send out per address | sysctl-27
  net.ipv6.conf.default.dad_transmits: 0

  # Assign one global unicast IPv6 addresses to each interface | sysctl-28
  net.ipv6.conf.default.max_addresses: 1

  # Protect the zero page of memory from userspace mmap to prevent kernel
  # NULL-dereference attacks against potential future kernel security
  # vulnerabilities.  (Added in kernel 2.6.23.)
  #
  # While this default is built into the Ubuntu kernel, there is no way to
  # restore the kernel default if the value is changed during runtime; for
  # example via package removal (e.g. wine, dosemu).  Therefore, this value
  # is reset to the secure default each time the sysctl values are loaded.
  vm.mmap_min_addr: 65536

  # These settings are set to the maximum supported value in order to
  # improve ASLR effectiveness for mmap, at the cost of increased
  # address-space fragmentation. | Tail-1
  vm.mmap_rnd_bits: 32
  vm.mmap_rnd_compat_bits: 16
